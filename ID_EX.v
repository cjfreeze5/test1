`timescale 1ns / 1ps
////////////////////////////////////////////////////////////////////////////////
// ECE369 - Computer Architecture
// 
// Module - ID_EX.v
// Description - ID/EX register stores all the control signal generated by the Controller along with the two register values read
//				from the register file, sign extended offset field, potential destination registers (Rd - I[15:0] and Rt - I[20-16])
////////////////////////////////////////////////////////////////////////////////
module ID_EX(Clk, ALUControl, RegDst, MemToReg, RegWrite, ALUSrc, MemWrite, MemRead, Branch, Zero, Jump, offset, RegData1, RegData2, 
            Rt, Rd, PCAddResult, ALUControl_out, RegDst_out, MemToReg_out, RegWrite_out, ALUSrc_out, MemWrite_out, MemRead_out, 
            Branch_out, Zero_out, Jump_out, offset_out, RegData1_out, RegData2_out, Rt_out, Rd_out, PCAddResult_out);
	
	input [3:0] ALUControl;
	input [1:0] MemWrite, MemRead;
	input Clk, MemToReg, RegDst, RegWrite, ALUSrc, Branch, Zero, Jump;
	input [31:0] RegData1, RegData2, offset, PCAddResult;
	input [4:0] Rt, Rd;
	
	reg [3:0] ALUControl_save;
	reg [1:0] MemWrite_save, MemRead_save;
	reg RegWrite_save, RegDst_save, MemToReg_save, ALUSrc_save, Branch_save, Zero_save, Jump_save;
	reg [31:0] RegData1_save, RegData2_save, offset_save, PCAddResult_save;
	reg [4:0] Rt_save, Rd_save;
	
	output reg [3:0] ALUControl_out;
	output reg [1:0] MemWrite_out, MemRead_out;
	output reg RegWrite_out, RegDst_out, MemToReg_out, ALUSrc_out, Branch_out, Zero_out, Jump_out;
	output reg [31:0] RegData1_out, RegData2_out, offset_out, PCAddResult_out;
	output reg [4:0] Rt_out, Rd_out;
	
	
	
	initial begin 
        ALUControl_save = 3'b0; 
		RegDst_save = 1'b0;
		MemToReg_save = 1'b0;
		RegWrite_save = 1'b0;
		ALUSrc_save = 1'b0;
		MemWrite_save = 2'b0;
		MemRead_save = 2'b0;
		Branch_save = 1'b0;
		Zero_save = 1'b0;
		Jump_save = 1'b0;
		RegData1_save = 32'b0;
		RegData2_save = 32'b0;
		offset_save = 32'b0;
		PCAddResult_save = 32'b0;
		Rt_save = 5'b0;
		Rd_save = 5'b0;
		
		ALUControl_out = 3'b0; 
		RegDst_out = 1'b0;
		MemToReg_out = 1'b0;
		RegWrite_out = 1'b0;
		ALUSrc_out = 1'b0;
		MemWrite_out = 2'b0;
		MemRead_out = 2'b0;
		Branch_out = 1'b0;
		Zero_out = 1'b0;
		Jump_out = 1'b0;
		RegData1_out = 32'b0;
		RegData2_out = 32'b0;
		offset_out = 32'b0;
		PCAddResult_out = 32'b0;
		Rt_out = 5'b0;
		Rd_out = 5'b0;
		
    end 
    
    
	
	always@(posedge Clk)begin
		ALUControl_save <= ALUControl; 
		RegDst_save <= RegDst;
		MemToReg_save <= MemToReg;
		RegWrite_save <= RegWrite;
		ALUSrc_save <= ALUSrc;
		MemWrite_save <= MemWrite;
		MemRead_save <= MemRead;
		Branch_save <= Branch;
		Zero_save <= Zero;
		Jump_save <= Jump;
		
		RegData1_save <= RegData1;
		RegData2_save <= RegData2;
		offset_save <= offset;
		PCAddResult_save <= PCAddResult;
		
		Rt_save <= Rt;
		Rd_save <= Rd;
	end
	
	always@(*)begin
		ALUControl_out <= ALUControl_save; 
		RegDst_out <= RegDst_save;
		MemToReg_out <= MemToReg_save;
		RegWrite_out <= RegWrite_save;
		ALUSrc_out <= ALUSrc_save;
		MemWrite_out <= MemWrite_save;
		MemRead_out <= MemRead_save;
		Branch_out <= Branch_save;
		Zero_out <= Zero_save;
		Jump_out <= Jump_save;
		
		RegData1_out <= RegData1_save;
		RegData2_out <= RegData2_save;
		offset_out <= offset_save;
		PCAddResult_out <= PCAddResult_save;
		
		Rt_out <= Rt_save;
		Rd_out <= Rd_save;
	end
	
endmodule